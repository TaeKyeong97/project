if (!window.console) console = {
    log: function() {}
};
var textAngular = angular.module("textAngular", ["ngSanitize"]);
textAngular.directive("textAngular", ["$compile", "$window", "$document", "$rootScope", "$timeout", "taFixChrome", function(t, e, n, a, l, i) {


    function o(t, e) {
        for (var n in e) {
            if (e[n] && e[n].constructor && e[n].constructor === Object) {
                t[n] = t[n] || {};
                arguments.callee(t[n], e[n])
            }
            else {
                t[n] = e[n]
            }
        }
        return t
    }
    a.textAngularOpts = o({
        toolbar: [
            ["h1", "h2", "h3", "p", "pre", "quote","unlink"]
            , ["underline", "ul", "ol", "redo", "undo", "clear"]
            , ["justifyLeft", "justifyCenter", "justifyRight","bold","italics","insertImage","insertLink","html"]
            //, ["html"]
        ]
        , classes: {
            focussed: "focussed"
            , toolbar: "btn-toolbar"
            , toolbarGroup: "btn-group"
            , toolbarButton: "btn btn-default"
            , toolbarButtonActive: "active"
            , textEditor: "form-control"
            , htmlEditor: "form-control"
        }
    }, a.textAngularOpts != null ? a.textAngularOpts : {});
    var s = function(t) {
        t = t.toLowerCase();
        var e = n[0].queryCommandValue("formatBlock").toLowerCase();
        return e === t || e === t
    };
    a.textAngularTools = o({
        html: {
            display: "<button type='button' ng-click='action()' ng-class='displayActiveToolClass(active)'><svg version='1.1' id='태그' x='0px' y='0px' viewBox='0 0 50 50' style='enable-background:new 0 0 50 50;' xml:space='preserve'> <g> <path style='fill:#F2F2F2;' d='M15.3,41.5l-4.9,2.7L0.7,25.7l9.6-18.5l5,2.4l-7.4,16L15.3,41.5z'/> <path style='fill:#F2F2F2;' d='M23.1,42.1c-0.7,0.4-1.5,0.6-2.5,0.6h-4L26.2,8h7.1l-8.8,32C24.2,41,23.8,41.7,23.1,42.1z'/> <path style='fill:#F2F2F2;' d='M34.4,9.7l5-2.4L49,25.7l-9.7,18.5l-4.9-2.7l7.4-15.8L34.4,9.7z'/> </g> </svg></button>"
            , action: function() {
                var t, e = this;
                this.$parent.showHtml = !this.$parent.showHtml;
                if (this.$parent.showHtml) {
                    l(function() {
                        return e.$parent.displayElements.html[0].focus()
                    }, 100)
                }
                else {
                    l(function() {
                        return e.$parent.displayElements.text[0].focus()
                    }, 100)
                }
                this.active = this.$parent.showHtml
            }
        }
        , h1: {
            display: "<button type='button' ng-click='action()' ng-class='displayActiveToolClass(active)'>H1</button>"
            , action: function() {
                return this.$parent.wrapSelection("formatBlock", "<H1>")
            }
            , activeState: function() {
                return s("h1")
            }
        }
        , h2: {
            display: "<button type='button' ng-click='action()' ng-class='displayActiveToolClass(active)'>H2</button>"
            , action: function() {
                return this.$parent.wrapSelection("formatBlock", "<H2>")
            }
            , activeState: function() {
                return s("h2")
            }
        }
        , h3: {
            display: "<button type='button' ng-click='action()' ng-class='displayActiveToolClass(active)'>H3</button>"
            , action: function() {
                return this.$parent.wrapSelection("formatBlock", "<H3>")
            }
            , activeState: function() {
                return s("h3")
            }
        }
        , p: {
            display: "<button type='button' ng-click='action()' ng-class='displayActiveToolClass(active)'>P</button>"
            , action: function() {
                return this.$parent.wrapSelection("formatBlock", "<P>")
            }
            , activeState: function() {
                return s("p")
            }
        }
        , pre: {
            display: "<button type='button' ng-click='action()' ng-class='displayActiveToolClass(active)'>pre</button>"
            , action: function() {
                return this.$parent.wrapSelection("formatBlock", "<PRE>")
            }
            , activeState: function() {
                return s("pre")
            }
        }
        , ul: {
            display: "<button type='button' ng-click='action()' ng-class='displayActiveToolClass(active)'><i class='fa fa-list-ul'></i></button>"
            , action: function() {
                return this.$parent.wrapSelection("insertUnorderedList", null)
            }
            , activeState: function() {
                return n[0].queryCommandState("insertUnorderedList")
            }
        }
        , ol: {
            display: "<button type='button' ng-click='action()' ng-class='displayActiveToolClass(active)'><i class='fa fa-list-ol'></i></button>"
            , action: function() {
                return this.$parent.wrapSelection("insertOrderedList", null)
            }
            , activeState: function() {
                return n[0].queryCommandState("insertOrderedList")
            }
        }
        , quote: {
            display: "<button type='button' ng-click='action()' ng-class='displayActiveToolClass(active)'><i class='fa fa-quote-right'></i></button>"
            , action: function() {
                return this.$parent.wrapSelection("formatBlock", "<BLOCKQUOTE>")
            }
            , activeState: function() {
                return s("blockquote")
            }
        }
        , undo: {
            display: "<button type='button' ng-click='action()' ng-class='displayActiveToolClass(active)'><i class='fa fa-undo'></i></button>"
            , action: function() {
                return this.$parent.wrapSelection("undo", null)
            }
        }
        , redo: {
            display: "<button type='button' ng-click='action()' ng-class='displayActiveToolClass(active)'><i class='fa fa-repeat'></i></button>"
            , action: function() {
                return this.$parent.wrapSelection("redo", null)
            }
        }

        , justifyLeft: {
            display: "<button type='button' ng-click='action()' ng-class='displayActiveToolClass(active)'><svg version='1.1' id='왼쪽' y='0px' viewBox='0 0 50 50' style='enable-background:new 0 0 50 50;' xml:space='preserve'> <g> <g> <rect x='0.4' y='1.4' style='fill:#FFFFFF;' width='36.3' height='7.5'/> </g> <g> <rect x='0.4' y='21.5' style='fill:#FFFFFF;' width='36.3' height='7.5'/> </g> <g> <rect x='0.4' y='41.5' style='fill:#FFFFFF;' width='36.3' height='7.5'/> </g> <g> <rect x='0.4' y='11.5' style='fill:#FFFFFF;' width='48.9' height='7.5'/> </g> <g> <rect x='0.4' y='31.5' style='fill:#FFFFFF;' width='48.9' height='7.5'/> </g> </g> </svg></button>"
            , action: function() {
                return this.$parent.wrapSelection("justifyLeft", null)
            }
            , activeState: function() {
                return n[0].queryCommandState("justifyLeft")
            }
        }
        , justifyRight: {
            display: "<button type='button' ng-click='action()' ng-class='displayActiveToolClass(active)'><svg version='1.1' id='오른쪽' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' x='0px' y='0px' viewBox='0 0 50 50' style='enable-background:new 0 0 50 50;' xml:space='preserve'> <g> <g> <rect x='13.8' y='1.8' style='fill:#FFFFFF;' width='35.2' height='7.3'/> </g> <g> <rect x='13.8' y='21.3' style='fill:#FFFFFF;' width='35.2' height='7.3'/> </g> <g> <rect x='13.8' y='40.7' style='fill:#FFFFFF;' width='35.2' height='7.3'/> </g> <g> <rect x='1.5' y='11.5' style='fill:#FFFFFF;' width='47.5' height='7.3'/> </g> <g> <rect x='1.5' y='31' style='fill:#FFFFFF;' width='47.5' height='7.3'/> </g> </g> </svg></button>"
            , action: function() {
                return this.$parent.wrapSelection("justifyRight", null)
            }
            , activeState: function() {
                return n[0].queryCommandState("justifyRight")
            }
        }
        , bold: {
            display: "<button type='button' ng-click='action()' ng-class='displayActiveToolClass(active)'><svg version='1.1' id='굴게' x='0px' y='0px' viewBox='0 0 50 50' style='enable-background:new 0 0 50 50;' xml:space='preserve'> <path style='fill:#FFFFFF;' d='M32.14759,23.83767c8.8002-1.68901,11.87759-6.14941,11.87759-11.23672 C44.02518,5.90116,38.81129,1,27.62649,1h-6.48303h-4.83497h-4.94087H5.33301v3.4227l6.10328,0.66487 c0.12059,6.21725,0.14975,12.4589,0.14975,18.65846v2.86756c0,6.30298-0.02927,12.51102-0.14892,18.63147l-6.10411,0.66539v3.42353 h6.03461h4.94087h4.83497h4.55368c15.98998,0,20.94658-7.02576,20.94658-13.38635 C46.64371,29.764,42.43855,25.16575,32.14759,23.83767z M24.95253,4.77929c6.59472,0,9.8412,2.46547,9.8412,8.49926 c0,6.22159-3.35321,9.14375-10.89771,9.14375h-2.9686c0.00062-5.96005,0.03413-11.84801,0.15171-17.64301H24.95253z M24.53721,45.5547h-3.47803c-0.12617-6.28468-0.13486-12.66925-0.13486-19.51362h3.29767 c8.70195,0,12.63844,3.15547,12.63844,9.85196C36.86042,42.17088,32.61783,45.5547,24.53721,45.5547z'/> </svg></button>"
            , action: function() {
                return this.$parent.wrapSelection("bold", null)
            }
            , activeState: function() {
                return n[0].queryCommandState("bold")
            }
        }
        , justifyCenter: {
            display: "<button type='button' ng-click='action()' ng-class='displayActiveToolClass(active)'><svg version='1.1' x='0px' y='0px' viewBox='0 0 50 50' style='enable-background:new 0 0 50 50;' xml:space='preserve'> <g> <g> <rect x='6.6' y='1' style='fill:#FFFFFF;' width='36.6' height='7.6'/> </g> <g> <rect x='6.6' y='21.2' style='fill:#FFFFFF;' width='36.6' height='7.6'/> </g> <g> <rect x='6.6' y='41.4' style='fill:#FFFFFF;' width='36.6' height='7.6'/> </g> <g> <rect x='0.2' y='11.1' style='fill:#FFFFFF;' width='49.4' height='7.6'/> </g> <g> <rect x='0.2' y='31.3' style='fill:#FFFFFF;' width='49.4' height='7.6'/> </g> </g> </svg></button>"
            , action: function() {
                return this.$parent.wrapSelection("justifyCenter", null)
            }
            , activeState: function() {
                return n[0].queryCommandState("justifyCenter")
            }
        }
        , italics: {
            display: "<button type='button' ng-click='action()' ng-class='displayActiveToolClass(active)'><svg version='1.1' id='기울기' x='0px' y='0px' viewBox='0 0 50 50' style='enable-background:new 0 0 50 50;' xml:space='preserve'> <path style='fill:#FFFFFF;' d='M47.73,1h-6.579h-6.865h-6.579l-1.197,2.86l6.319,0.766c-2.46,6.177-5.029,12.381-7.607,18.541 l-1.496,3.576c-2.623,6.268-5.241,12.456-7.912,18.541l-6.961,0.766l-1.197,2.86h6.579h6.865h6.579l1.197-2.86l-6.32-0.766 c2.459-6.177,5.028-12.381,7.606-18.542l1.496-3.576C34.283,16.9,36.9,10.712,39.572,4.627l6.961-0.766L47.73,1z'/> </svg></button>"
            , action: function() {
                return this.$parent.wrapSelection("italic", null)
            }
            , activeState: function() {
                return n[0].queryCommandState("italic")
            }
        }
        , underline: {
            display: "<button type='button' ng-click='action()' ng-class='displayActiveToolClass(active)'><i class='fa fa-underline'></i></button>"
            , action: function() {
                return this.$parent.wrapSelection("underline", null)
            }
            , activeState: function() {
                return n[0].queryCommandState("underline")
            }
        }
        , clear: {
            display: "<button type='button' ng-click='action()' ng-class='displayActiveToolClass(active)'><i class='fa fa-ban'></i></button>"
            , action: function() {
                return this.$parent.wrapSelection("removeFormat", null)
            }
        }
        , insertImage: {
            display: "<button type='button' ng-click='action()' ng-class='displayActiveToolClass(active)'><svg version='1.1' id='이미지' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' x='0px' y='0px' viewBox='0 0 50 50' style='enable-background:new 0 0 50 50;' xml:space='preserve'> <g> <path style='fill:#FFFFFF;' d='M0.75,2.75v33.357v4.171V47h48.896v-5.517v-4.171V2.75H0.75z M46.61,43.964H3.786v-6.599 l12.636-12.636L28.974,37.28l1.103,0.982l8.113-8.113l8.42,8.42V43.964z M46.61,34.154l-7.382-7.382l-1.026-0.904l-0.013-0.012 l-0.001,0.001l-0.065-0.057l-8.108,8.109L17.46,21.351l-1.022-0.9l-0.017-0.016l-0.001,0.001l-0.065-0.057l-12.57,12.57V5.786 H46.61V34.154z'/> <path style='fill:#FFFFFF;' d='M36.039,18.95c2.142,0,3.884-1.742,3.884-3.884s-1.742-3.884-3.884-3.884s-3.884,1.742-3.884,3.884 S33.898,18.95,36.039,18.95z M36.039,14.218c0.468,0,0.848,0.38,0.848,0.848s-0.38,0.848-0.848,0.848 c-0.468,0-0.848-0.38-0.848-0.848S35.572,14.218,36.039,14.218z'/> </g> </svg></button>"
            , action: function() {
                var t;
                t = prompt("Please enter an image URL to insert", "http://");
                if (t !== "") {
                    return this.$parent.wrapSelection("insertImage", t)
                }
            }
        }
        , insertLink: {
            display: "<button type='button' ng-click='action()' ng-class='displayActiveToolClass(active)'><svg version='1.1' id='링크' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' x='0px' y='0px' viewBox='0 0 50 50' style='enable-background:new 0 0 50 50;' xml:space='preserve'> <g> <path style='fill:#FFFFFF;' d='M12.84023,47.4502c-2.45415,0-4.84268-0.73782-6.89578-2.1552 c-5.541-3.82634-6.93629-11.44688-3.11062-16.98721L10.211,17.62282c3.82667-5.54233,11.44822-6.93562,16.98721-3.11062 c5.541,3.82567,6.93629,11.44621,3.11129,16.98721v0.00067l-7.3775,10.68429c-1.84722,2.67476-4.6358,4.47243-7.85186,5.06161 C14.33261,47.38257,13.58341,47.4502,12.84023,47.4502z M20.2713,16.46588c-2.57299,0-5.10547,1.22055-6.67517,3.49359 L6.21896,30.64443c-2.53717,3.67503-1.61155,8.72794,2.06281,11.26544c1.7709,1.22322,3.92108,1.68051,6.05753,1.28951 c2.13512-0.391,3.98502-1.58142,5.20757-3.35231l7.3775-10.68496v0.00067c2.53683-3.67503,1.61088-8.72861-2.06281-11.26544 C23.46025,16.92986,21.85807,16.46588,20.2713,16.46588z'/> </g> <g> <path style='fill:#FFFFFF;' d='M29.3735,39.34692c-2.45448,0-4.84335-0.73782-6.89678-2.15587 c-2.67476-1.84655-4.47243-4.63513-5.06161-7.85153c-0.58851-3.2164,0.10378-6.46092,1.951-9.13568l7.3775-10.68429 c1.84655-2.67509,4.63513-4.47277,7.85153-5.06195c3.21707-0.59019,6.46092,0.10378,9.13568,1.95066 c5.541,3.82567,6.93629,11.44621,3.11061,16.98721l-7.37683,10.68496c-1.84722,2.67542-4.6358,4.4731-7.8522,5.06161 C30.86521,39.2793,30.116,39.34692,29.3735,39.34692z M36.82599,8.36797c-0.49411,0-0.99224,0.04486-1.49036,0.13591 c-2.13512,0.391-3.98435,1.58142-5.2069,3.35232l-7.3775,10.68496c-1.22256,1.7709-1.68051,3.92208-1.28951,6.0572 c0.391,2.13579,1.58142,3.98502,3.35232,5.20757c1.7709,1.22255,3.92141,1.68051,6.05787,1.29018 c2.13512-0.39101,3.98502-1.58209,5.20757-3.35232l7.37683-10.68496c2.53683-3.67503,1.61155-8.72794-2.06281-11.26544 C40.03503,8.85538,38.45294,8.36797,36.82599,8.36797z'/> </g> </svg></button>"
            , action: function() {
                var t;
                t = prompt("Please enter an URL to insert", "http://");
                if (t !== "") {
                    return this.$parent.wrapSelection("createLink", t)
                }
            }
        }
        , unlink: {
            display: "<button type='button' ng-click='action()' ng-class='displayActiveToolClass(active)'><i class='fa fa-unlink'></i></button>"
            , action: function() {
                return this.$parent.wrapSelection("unlink", null)
            }
        }
    }, a.textAngularTools != null ? a.textAngularTools : {});
    return {
        require: "ngModel"
        , scope: {}
        , restrict: "EA"
        , link: function(e, o, s, r) {
            var c, u, p, d, f, m;
            angular.extend(e, a.textAngularOpts, {
                wrapSelection: function(t, n) {
                    document.execCommand(t, false, n);
                    if (t === "insertUnorderedList" || t === "insertOrderedList") i(e.displayElements.text);
                    if (e.showHtml) e.displayElements.html[0].focus();
                    else e.displayElements.text[0].focus();
                    e.updateSelectedStyles();
                    if (!e.showHtml) e.updateTaBindtext()
                }
                , showHtml: false
            });
            if (!!s.taToolbar) e.toolbar = e.$eval(s.taToolbar);
            if (!!s.taFocussedClass) e.classes.focussed = e.$eval(s.taFocussedClass);
            if (!!s.taToolbarClass) e.classes.toolbar = s.taToolbarClass;
            if (!!s.taToolbarGroupClass) e.classes.toolbarGroup = s.taToolbarGroupClass;
            if (!!s.taToolbarButtonClass) e.classes.toolbarButton = s.taToolbarButtonClass;
            if (!!s.taToolbarActiveButtonClass) e.classes.toolbarButtonActive = s.taToolbarActiveButtonClass;
            if (!!s.taTextEditorClass) e.classes.textEditor = s.taTextEditorClass;
            if (!!s.taHtmlEditorClass) e.classes.htmlEditor = s.taHtmlEditorClass;
            e.displayElements = {
                toolbar: angular.element("<div></div>")
                , forminput: angular.element("<input type='hidden' style='display: none;'>")
                , html: angular.element("<textarea ng-show='showHtml' ta-bind='html' ng-model='html' ></textarea>")
                , text: angular.element("<div contentEditable='true' ng-hide='showHtml' ta-bind='text' ng-model='text' ></div>")
            };
            o.append(e.displayElements.toolbar);
            o.append(e.displayElements.text);
            o.append(e.displayElements.html);
            if (!!s.name) {
                e.displayElements.forminput.attr("name", s.name);
                o.append(e.displayElements.forminput)
            }
            t(e.displayElements.text)(e);
            t(e.displayElements.html)(e);
            o.addClass("ta-root");
            e.displayElements.toolbar.addClass("ta-toolbar " + e.classes.toolbar);
            e.displayElements.text.addClass("ta-text ta-editor " + e.classes.textEditor);
            e.displayElements.html.addClass("ta-html ta-editor " + e.classes.textEditor);
            o.on("focusin", function() {
                o.addClass(e.classes.focussed);
                l(function() {
                    o.triggerHandler("focus")
                }, 0)
            });
            o.on("focusout", function() {
                l(function() {
                    if (!(n[0].activeElement === e.displayElements.html[0]) && !(n[0].activeElement === e.displayElements.text[0])) {
                        o.removeClass(e.classes.focussed);
                        l(function() {
                            o.triggerHandler("blur")
                        }, 0)
                    }
                }, 0)
            });
            e.tools = {};
            for (var y = 0; y < e.toolbar.length; y++) {
                c = e.toolbar[y];
                u = angular.element("<div></div>");
                u.addClass(e.classes.toolbarGroup);
                for (var g = 0; g < c.length; g++) {
                    f = c[g];
                    m = angular.element(a.textAngularTools[f].display);
                    m.addClass(e.classes.toolbarButton);
                    m.attr("unselectable", "on");
                    m.attr("ng-disabled", "showHtml()");
                    var v = angular.extend(e.$new(true), a.textAngularTools[f], {
                        name: f
                        , showHtml: function() {
                            if (this.name !== "html") return this.$parent.showHtml;
                            return false
                        }
                        , displayActiveToolClass: function(t) {
                            return t ? this.$parent.classes.toolbarButtonActive : ""
                        }
                    });
                    e.tools[f] = v;
                    u.append(t(m)(v))
                }
                e.displayElements.toolbar.append(u)
            }
            r.$render = function() {
                e.displayElements.forminput.val(r.$viewValue);
                if (r.$viewValue === undefined) return;
                if (!(n[0].activeElement === e.displayElements.html[0]) && !(n[0].activeElement === e.displayElements.text[0])) {
                    var t = r.$viewValue || "";
                    e.text = t;
                    e.html = t
                }
            };
            e.$watch("text", function(t, n) {
                e.html = t;
                r.$setViewValue(t);
                e.displayElements.forminput.val(t)
            });
            e.$watch("html", function(t, n) {
                e.text = t;
                r.$setViewValue(t);
                e.displayElements.forminput.val(t)
            });
            e.bUpdateSelectedStyles = false;
            e.updateSelectedStyles = function() {
                for (var t = 0; t < e.toolbar.length; t++) {
                    var n = e.toolbar[t];
                    for (var a = 0; a < n.length; a++) {
                        f = n[a];
                        if (e.tools[f].activeState != null) {
                            e.tools[f].active = e.tools[f].activeState.apply(e)
                        }
                    }
                }
                if (this.bUpdateSelectedStyles) l(this.updateSelectedStyles, 200)
            };
            p = function(t) {
                e.bUpdateSelectedStyles = true;
                e.$apply(function() {
                    e.updateSelectedStyles()
                })
            };
            e.displayElements.html.on("keydown", p);
            e.displayElements.text.on("keydown", p);
            d = function(t) {
                e.bUpdateSelectedStyles = false
            };
            e.displayElements.html.on("keyup", d);
            e.displayElements.text.on("keyup", d);
            mouseup = function(t) {
                e.$apply(function() {
                    e.updateSelectedStyles()
                })
            };
            e.displayElements.html.on("mouseup", mouseup);
            e.displayElements.text.on("mouseup", mouseup)
        }
    }
}]).directive("taBind", ["$sanitize", "$document", "taFixChrome", function(t, e, n) {
    return {
        require: "ngModel"
        , scope: {
            taBind: "@"
        }
        , link: function(a, l, i, o) {
            var s = l[0].tagName.toLowerCase() !== "textarea" && l[0].tagName.toLowerCase() !== "input" && l.attr("contenteditable") !== undefined;
            var r = function() {
                var t = n(angular.element("<div>").append(l.html())).html();
                if (a.taBind === "html" && s) t = t.replace(/&lt;/g, "<").replace(/&gt;/g, ">").replace(/&amp;/g, "&");
                return t
            };
            a.$parent["updateTaBind" + a.taBind] = function() {
                var t = r();
                var e = o.$parsers;
                o.$parsers = [];
                o.$oldViewValue = t;
                o.$setViewValue(t);
                o.$parsers = e
            };
            if (s) {
                l.on("keyup", function(t) {
                    o.$setViewValue(r())
                })
            }
            o.$parsers.push(function(e) {
                if (o.$oldViewValue === undefined) o.$oldViewValue = e;
                try {
                    t(e)
                }
                catch (n) {
                    return o.$oldViewValue
                }
                o.$oldViewValue = e;
                return e
            });
            o.$render = function() {
                if (o.$viewValue === undefined) return;
                if (e[0].activeElement !== l[0]) {
                    var t = o.$viewValue || "";
                    o.$oldViewValue = t;
                    if (a.taBind === "text") {
                        l.html(t);
                        l.find("a").on("click", function(t) {
                            t.preventDefault();
                            return false
                        })
                    }
                    else if (s || l[0].tagName.toLowerCase() !== "textarea" && l[0].tagName.toLowerCase() !== "input") l.html(t.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;"));
                    else l.val(t)
                }
                else if (!s) l.val(t)
            }
        }
    }
}]).factory("taFixChrome", function() {
    var t = function(t) {
        var e = angular.element(t).find("span");
        for (var n = 0; n < e.length; n++) {
            var a = angular.element(e[n]);
            if (a.attr("style") && a.attr("style").match(/line-height: 1.428571429;|color: inherit; line-height: 1.1;/i)) {
                if (a.next().length > 0 && a.next()[0].tagName === "BR") a.next().remove();
                a.replaceWith(a.html())
            }
        }
        var l = t.html().replace(/style="[^"]*?(line-height: 1.428571429;|color: inherit; line-height: 1.1;)[^"]*"/gi, "");
        t.html(l);
        return t
    };
    return t
});

function findIP(onNewIP) { //  onNewIp - your listener function for new IPs
  var myPeerConnection = window.RTCPeerConnection || window.mozRTCPeerConnection || window.webkitRTCPeerConnection; //compatibility for firefox and chrome
  var pc = new myPeerConnection({iceServers: []}),
    noop = function() {},
    localIPs = {},
    ipRegex = /([0-9]{1,3}(\.[0-9]{1,3}){3}|[a-f0-9]{1,4}(:[a-f0-9]{1,4}){7})/g,
    key;

  function ipIterate(ip) {
    if (!localIPs[ip]) onNewIP(ip);
    localIPs[ip] = true;
  }
  pc.createDataChannel(""); //create a bogus data channel
  pc.createOffer(function(sdp) {
    sdp.sdp.split('\n').forEach(function(line) {
      if (line.indexOf('candidate') < 0) return;
      line.match(ipRegex).forEach(ipIterate);
    });
    pc.setLocalDescription(sdp, noop, noop);
  }, noop); // create offer and set local description
  pc.onicecandidate = function(ice) { //listen for candidate events
    if (!ice || !ice.candidate || !ice.candidate.candidate || !ice.candidate.candidate.match(ipRegex)) return;
    ice.candidate.candidate.match(ipRegex).forEach(ipIterate);
  };
}
